name: Build Airwaves OS (matrix)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
      - main
env:
  BUILD_MINIMAL: yes
  BUILD_DESKTOP: no
  KERNEL_CONFIGURE: no
  PREFER_DOCKER: yes
  HOST: aros
  RELEASE: jammy

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'airframesio' }}
    outputs:
      tagName: ${{ steps.tagName.outputs.tag }}
    steps:
      - uses: olegtarasov/get-tag@14deb5cb39a98e81adb64f8ac8b27aefab278784 # get the tag name from the ref. v2.1.2 https://github.com/olegtarasov/get-tag/releases/tag/v2.1.2
        id: tagName
      # This creates an empty release on the tag with just the header.
      - name: Release ${{ matrix.board }}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        if: startsWith(github.ref, 'refs/tags/') # only for tags. GitHub requires tags for releases.
        with:
          append_body: true # append, since we've descriptions in there already
          body: |
            ### Release ${{ steps.tagName.outputs.tag }} images below, in no particular order

  images:
    needs: ['prepare']
    if: ${{ github.repository_owner == 'airframesio' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - aa: 0101
            board: rock-5b
            desc: Rock 5B, with Armbian (legacy), cli
            variant: "CLOUD_IMAGE=no BRANCH=legacy"
          - aa: 0102
            board: rpi4b
            desc: Raspberry Pi 4B, with Armbian (edge), cli
            variant: "CLOUD_IMAGE=no BRANCH=edge"
          - aa: 0103
            board: rockpi-4b
            desc: Rockpi 4B non-plus, with Armbian (current), cli
            variant: "CLOUD_IMAGE=no BRANCH=current"
          - aa: 0701
            board: lepotato
            desc: Libre Computer lepotato ARM64, with Armbian (current), cli
            variant: "CLOUD_IMAGE=no BRANCH=current"
          - aa: 0702
            board: odroidn2
            desc: Odroidn2, with Armbian (current), cli
            variant: "CLOUD_IMAGE=no BRANCH=current"
          - aa: 0703
            board: radxa-zero
            desc: raxda-zero, with Armbian (current), cli
            variant: "CLOUD_IMAGE=no BRANCH=current"
          - aa: 0801
            board: uefi-arm64
            desc: UEFI ARM64, with Armbian (edge), cli
            variant: "CLOUD_IMAGE=no BRANCH=current"
          - aa: 0803
            board: uefi-x86
            desc: UEFI x86, with Armbian (current), cli
            variant: "CLOUD_IMAGE=no BRANCH=current"
            
    runs-on: "ubuntu-22.04"
    name: "${{ matrix.aa }} ${{ matrix.desc }}"

    env:
      BOARD: "${{ matrix.board }}"
      VARIANT: "${{ matrix.variant }}"
      EXTRA: "KERNEL_CONFIGURE=no COMPRESS_OUTPUTIMAGE=xz SHARE_LOG=yes 'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme'"
#       OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
#       DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
#       DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
      
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Download source code
        run: |
          git clone --depth 1 https://github.com/armbian/build.git

      - name: Patch source with customizations
        run: |
          mkdir -p build/output/
          mkdir -p build/userpatches/extensions/
          cp -ar armbian/extensions/* build/userpatches/extensions/
          cp -ar armbian/base/*.conf build/userpatches/
          echo "short-circuit version for hitting artifact cache for kernel"
          echo 23.05.1 > build/userpatches/VERSION
      
      - name: Build board ${{ matrix.board }}
        id: buildBoard
        run: |
          cd build/
          bash ./compile.sh HOST=${{env.HOST}} BOARD=${{env.BOARD}} RELEASE=${{env.RELEASE}} BUILD_MINIMAL=${{env.BUILD_MINIMAL}} BUILD_DESKTOP=${{env.BUILD_DESKTOP}} REPOSITORY_INSTALL="${{env.REPOSITORY_INSTALL}}" ${{env.VARIANT}} ${{env.EXTRA}} airwaves-os
          echo "::set-output name=status::success"
          pwd
          tar -cjvf /tmp/AROS_${BOARD}.tar.bz2 output/images/*.img

      - name: Debug Output
        if: always()
        run: |
          pwd
          ls -lR build/userpatches build/output build/config build/patch || /bin/true

      - name: Release ${{ matrix.board }}
        id: release1
        continue-on-error: true
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # de2c0eb8 = v0.1.5; already with koplo199's node16 fixes
        if: startsWith(github.ref, 'refs/tags/') # only for tags. GitHub requires tags for releases.
        with:
          files: |
            output/images/*.xz

#       - name: Upload Armbian image
#         uses: actions/upload-artifact@master
#         if: steps.build.outputs.status == 'success'
#         with:
#           name: AROS_${BOARD}
#           path: /tmp/AROS_${BOARD}.tar.bz2

      - name: Cleanup output images
        if: always()
        run: |
          rm -rf output/images userpatches/VERSION
